import play.sbt.routes.RoutesKeys
import sbt.Def
import scoverage.ScoverageKeys
import uk.gov.hmrc.DefaultBuildSettings
import uk.gov.hmrc.versioning.SbtGitVersioning.autoImport.majorVersion

lazy val appName: String = "pillar2-frontend"

ThisBuild / scalaVersion := "2.13.16"
ThisBuild / majorVersion := 0
ThisBuild / useSuperShell := false
ThisBuild / semanticdbEnabled := true
ThisBuild / semanticdbVersion := scalafixSemanticdb.revision

lazy val root: Project = (project in file("."))
  .enablePlugins(PlayScala, SbtDistributablesPlugin)
  .disablePlugins(JUnitXmlReportPlugin) //Required to prevent https://github.com/scalatest/scalatest/issues/1427
  .settings(
    name := appName,

    // Play Framework configuration
    PlayKeys.playDefaultPort := 10050,

    // Routes and templates configuration
    RoutesKeys.routesImport ++= Seq(
      "models._",
      "uk.gov.hmrc.play.bootstrap.binders.RedirectUrl"
    ),
    TwirlKeys.templateImports ++= twirlImports,

    // Build and dependency settings
    Global / onChangedBuildSource := ReloadOnSourceChanges,
    update / evictionWarningOptions := EvictionWarningOptions.default.withWarnScalaVersionEviction(false),
    libraryDependencies ++= AppDependencies(),
    retrieveManaged := true,

    // Test and coverage configuration
    inConfig(Test)(testSettings),
    scoverageSettings,

    // Compiler and formatting settings
    Compile / scalafmtOnCompile := true,
    Test / scalafmtOnCompile := true,
    scalacOptions ++= compilerSettings,

    // Asset pipeline configuration
    // bundle multiple JS files into a single file
    Concat.groups := Seq("javascripts/application.js" -> group(Seq("javascripts/app.js"))),
    // prevent minifier from removing code that third-party libraries need
    uglifyCompressOptions := Seq("unused=false", "dead_code=false"),
    // only minify bundled files generated by concat
    uglify / includeFilter := GlobFilter("application.js"),
    // add hashes to assets for browser caching
    pipelineStages := Seq(digest),
    // force asset bundling and minification to run in development mode (normally only runs in production mode)
    Assets / pipelineStages := Seq(concat, uglify)
  )

lazy val it: Project = project
  .enablePlugins(PlayScala)
  .dependsOn(root % "test->test") // the "test->test" allows reusing test code and test dependencies
  .settings(
    DefaultBuildSettings.itSettings(),
    libraryDependencies ++= AppDependencies.it
  )

lazy val testSettings = Seq(
  fork := true,
  unmanagedSourceDirectories += baseDirectory.value / "test-utils"
)

lazy val scoverageSettings = Seq(
  coverageMinimumStmtTotal := 90.54,
  coverageMinimumBranchTotal := 86.55,
  coverageFailOnMinimum := true,
  coverageHighlighting := true,
  coverageExcludedFiles :=
    """|.*handlers.*;
       |.*queries.*;
       |.*viewmodels.*;
       |.*components.*;
       |.*config.*;
       |.*models.*;
       |.*mapping.*;
       |.*stubsonly.*;
       |.*utils.*;
       |.*Routes.*;
       |.*views.xml.pdf.*;
       |.*views.ViewUtils;
       |.*views.html.templates.*;
       |""".stripMargin.replaceAll("\n", ";")
)

lazy val twirlImports: Seq[String] = Seq(
  "play.twirl.api.HtmlFormat",
  "play.twirl.api.HtmlFormat._",
  "uk.gov.hmrc.govukfrontend.views.html.components._",
  "uk.gov.hmrc.hmrcfrontend.views.html.components._",
  "uk.gov.hmrc.hmrcfrontend.views.html.helpers._",
  "uk.gov.hmrc.hmrcfrontend.views.config._",
  "views.ViewUtils._",
  "models.Mode",
  "controllers.routes._",
  "viewmodels.govuk.all._"
)

lazy val compilerSettings = Seq(
  "-feature",
  "-Wconf:cat=deprecation:ws,cat=feature:ws,cat=optimizer:ws,src=target/.*:s",
  "-Ypatmat-exhaust-depth",
  "off"
)

addCommandAlias("prePrChecks", "; scalafmtCheckAll; scalafmtSbtCheck; scalafixAll --check")
addCommandAlias("checkCodeCoverage", "; clean; coverage; test; it/test; coverageReport")
addCommandAlias("lint", "; scalafmtAll; scalafmtSbt; scalafixAll")
